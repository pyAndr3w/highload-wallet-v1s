#include "imports/stdlib.fc";


;;; Store `cell` [actions] to register c5 (out actions)
() set_actions(cell actions) impure asm "c5 POP";

;; load msg_flags only
(slice, int) load_msg_flags(slice s) asm(-> 1 0) "4 LDU";

;;; Checking that the "bounced" bit in the flags is set to "true"
int bounced?(int flags) asm "ONE AND";

(slice, int) internal_transfer?(slice s) asm "x{ae42e5a4} SDBEGINSQ";
(slice, ()) ~skip_query_id(slice s) asm "64 LDU NIP";
(slice, ()) ~skip_ref(slice s) asm "LDREF NIP";
(slice, ()) ~skip_coins(slice s) asm "LDGRAMS NIP";
(slice, ()) ~skip_msg_addr(slice s) asm "LDMSGADDR NIP";
(slice, ()) ~skip_zero(slice s) asm "b{0} SDBEGINS";
(slice, ()) ~skip_dict(slice s) asm "SKIPOPTREF";


(int, int, int) load_data() inline {
  slice ds = get_data().begin_parse();
  return (ds~load_uint(256), ds~load_uint(32), ds.preload_uint(32));
}


() save_data(int seq_no, int subwallet_id, int public_key) impure inline {
  set_data(begin_cell()
          .store_uint(public_key, 256)
          .store_uint(subwallet_id, 32)
          .store_uint(seq_no, 32)
          .end_cell());
}


() recv_internal(cell in_msg_full, slice in_msg_body) impure {
  (int body_bits, int body_refs) = in_msg_body.slice_bits_refs();
  ifnot ((body_refs == 1) & (body_bits == (32 + 64))) {
    return ();
  }

  slice in_msg_full_slice = in_msg_full.begin_parse();
  int flags = in_msg_full_slice~load_msg_flags();
  slice sender = in_msg_full_slice~load_msg_addr();

  if ((~ sender.equal_slice_bits(my_address())) | (flags.bounced?())) {
    return ();
  }

  if (in_msg_body~internal_transfer?()) {
    in_msg_body~skip_query_id();
    cell actions = in_msg_body.preload_ref();
    set_actions(actions);
    return ();
  }
}


() recv_external(slice msg_body) impure {
  slice sign = msg_body~load_bits(512);
  cell msg_inner = msg_body~load_ref();
  msg_body.end_parse();
  int msg_inner_hash = msg_inner.cell_hash();

  slice msg_inner_slice = msg_inner.begin_parse();
  int   mode            = msg_inner_slice~load_uint(8);
  cell  message         = msg_inner_slice~load_ref();
  int   subwallet_id    = msg_inner_slice~load_uint(32);
  int   seq_no          = msg_inner_slice~load_uint(32);
  int   valid_until     = msg_inner_slice~load_uint(64);
  msg_inner_slice.end_parse();

  (int public_key, int stored_subwallet_id, int stored_seq_no) = load_data();
  save_data((stored_seq_no + 1) % 0xFFFFFFFF, stored_subwallet_id, public_key);

  throw_unless(33, check_signature(msg_inner_hash, sign, public_key));

  throw_if(34, valid_until < now());
  throw_unless(35, stored_subwallet_id == subwallet_id);
  throw_unless(36, stored_seq_no == seq_no);

  accept_message();
  commit();

  slice message_slice = message.begin_parse();

  message_slice~skip_zero(); ;; throw if not int_msg_info$0
  int flags = message_slice~load_uint(3);
  if (flags.bounced?()) { return (); }
  message_slice~skip_msg_addr();
  message_slice~skip_msg_addr();
  message_slice~skip_coins();
  message_slice~skip_dict();
  message_slice~skip_coins();
  message_slice~skip_coins();
  message_slice~skip_bits(64 + 32);
  message_slice~skip_zero(); ;; throw if state-init included (state-init not supported)
  int either_body = message_slice~load_int(1);
  if (either_body) {
    message_slice~skip_ref();
    message_slice.end_parse();
  }

  send_raw_message(message, mode | 2);
}


int seqno() method_id {
  return get_data().begin_parse().skip_bits(256 + 32).preload_uint(32);
}


int get_subwallet_id() method_id {
  return get_data().begin_parse().skip_bits(256).preload_uint(32);
}


int get_public_key() method_id {
  return get_data().begin_parse().preload_uint(256);
}

